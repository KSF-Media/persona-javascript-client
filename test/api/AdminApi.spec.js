/**
 * Persona
 * KSF Media unified login service
 *
 * The version of the OpenAPI document: 1.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.1-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Persona);
  }
}(this, function(expect, Persona) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Persona.AdminApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AdminApi', function() {
    describe('adminFreePassDelete', function() {
      it('should call adminFreePassDelete successfully', function(done) {
        //uncomment below and update the code to test adminFreePassDelete
        //instance.adminFreePassDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('adminFreePassPut', function() {
      it('should call adminFreePassPut successfully', function(done) {
        //uncomment below and update the code to test adminFreePassPut
        //instance.adminFreePassPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('adminFreePassesGet', function() {
      it('should call adminFreePassesGet successfully', function(done) {
        //uncomment below and update the code to test adminFreePassesGet
        //instance.adminFreePassesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('adminSearchPost', function() {
      it('should call adminSearchPost successfully', function(done) {
        //uncomment below and update the code to test adminSearchPost
        //instance.adminSearchPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('adminTransferPassiveSubscribersListidPost', function() {
      it('should call adminTransferPassiveSubscribersListidPost successfully', function(done) {
        //uncomment below and update the code to test adminTransferPassiveSubscribersListidPost
        //instance.adminTransferPassiveSubscribersListidPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('adminUserPost', function() {
      it('should call adminUserPost successfully', function(done) {
        //uncomment below and update the code to test adminUserPost
        //instance.adminUserPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('adminUserUuidDelete', function() {
      it('should call adminUserUuidDelete successfully', function(done) {
        //uncomment below and update the code to test adminUserUuidDelete
        //instance.adminUserUuidDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
