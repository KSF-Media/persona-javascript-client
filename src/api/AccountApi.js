/**
 * Persona
 * KSF Media unified login service
 *
 * The version of the OpenAPI document: 1.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.1-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ForgotPasswordData', 'model/InlineResponse400', 'model/InlineResponse415', 'model/UpdatePasswordData'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ForgotPasswordData'), require('../model/InlineResponse400'), require('../model/InlineResponse415'), require('../model/UpdatePasswordData'));
  } else {
    // Browser globals (root is window)
    if (!root.Persona) {
      root.Persona = {};
    }
    root.Persona.AccountApi = factory(root.Persona.ApiClient, root.Persona.ForgotPasswordData, root.Persona.InlineResponse400, root.Persona.InlineResponse415, root.Persona.UpdatePasswordData);
  }
}(this, function(ApiClient, ForgotPasswordData, InlineResponse400, InlineResponse415, UpdatePasswordData) {
  'use strict';

  /**
   * Account service.
   * @module api/AccountApi
   * @version 1.3.0
   */

  /**
   * Constructs a new AccountApi. 
   * @alias module:api/AccountApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the accountPasswordCheckTokenPost operation.
     * @callback module:api/AccountApi~accountPasswordCheckTokenPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate password reset token
     * The second step in the forgotten password reset procedure is to ensure that the password reset token is still valid. Each token can be used at most once and it is valid for a limited duration.
     * @param {String} body 
     * @param {module:api/AccountApi~accountPasswordCheckTokenPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.accountPasswordCheckTokenPost = function(body, callback) {
      var postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling accountPasswordCheckTokenPost");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json;charset=utf-8'];
      var accepts = ['*/*'];
      var returnType = null;
      return this.apiClient.callApi(
        '/account/password/check-token', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountPasswordForgotPost operation.
     * @callback module:api/AccountApi~accountPasswordForgotPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request password reset link
     * This is the starting point of the forgotten password recovery process. It sends a password reset link with a pasword reset token to the given user's email address if such user and email address exist.
     * @param {module:model/ForgotPasswordData} body 
     * @param {module:api/AccountApi~accountPasswordForgotPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.accountPasswordForgotPost = function(body, callback) {
      var postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling accountPasswordForgotPost");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json;charset=utf-8'];
      var accepts = ['*/*'];
      var returnType = null;
      return this.apiClient.callApi(
        '/account/password/forgot', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountPasswordResetPost operation.
     * @callback module:api/AccountApi~accountPasswordResetPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset a forgotten password with a token
     * The final step of the forgotten password reset procedure performs password reset with a token obtained from the email message sent by the POST /password/forgot endpoint and the new password and its confirmation.
     * @param {module:model/UpdatePasswordData} body 
     * @param {module:api/AccountApi~accountPasswordResetPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.accountPasswordResetPost = function(body, callback) {
      var postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling accountPasswordResetPost");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json;charset=utf-8'];
      var accepts = ['*/*'];
      var returnType = null;
      return this.apiClient.callApi(
        '/account/password/reset', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }
  };

  return exports;
}));
