/**
 * Persona
 * KSF Media unified login service
 *
 * OpenAPI spec version: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GdprConsent from '../model/GdprConsent';
import InlineResponse400 from '../model/InlineResponse400';
import InlineResponse415 from '../model/InlineResponse415';
import LegalConsent from '../model/LegalConsent';
import LoginResponse from '../model/LoginResponse';
import NewUser from '../model/NewUser';
import PausedSubscription from '../model/PausedSubscription';
import SubscriptionPauseDates from '../model/SubscriptionPauseDates';
import User from '../model/User';
import UserUpdate from '../model/UserUpdate';

/**
* Users service.
* @module api/UsersApi
* @version 1.3.0
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the usersPost operation.
     * @callback module:api/UsersApi~usersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoginResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new user.
     * @param {module:model/NewUser} body 
     * @param {module:api/UsersApi~usersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoginResponse}
     */
    usersPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling usersPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json;charset=utf-8'];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = LoginResponse;
      return this.apiClient.callApi(
        '/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUuidEntitlementGet operation.
     * @callback module:api/UsersApi~usersUuidEntitlementGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get users entitlements.
     * @param {String} uuid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.cacheControl 
     * @param {module:api/UsersApi~usersUuidEntitlementGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    usersUuidEntitlementGet(uuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling usersUuidEntitlementGet");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Cache-Control': opts['cacheControl']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/users/{uuid}/entitlement', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUuidGdprPut operation.
     * @callback module:api/UsersApi~usersUuidGdprPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the GDPR consent settings for a given user.
     * Authorization header expects the following format ‘OAuth {token}’
     * @param {String} uuid 
     * @param {Array.<GdprConsent>} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {module:api/UsersApi~usersUuidGdprPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    usersUuidGdprPut(uuid, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling usersUuidGdprPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling usersUuidGdprPut");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json;charset=utf-8'];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = User;
      return this.apiClient.callApi(
        '/users/{uuid}/gdpr', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUuidGet operation.
     * @callback module:api/UsersApi~usersUuidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user by UUID.
     * Authorization header expects the following format ‘OAuth {token}’
     * @param {String} uuid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.cacheControl 
     * @param {module:api/UsersApi~usersUuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    usersUuidGet(uuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling usersUuidGet");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Cache-Control': opts['cacheControl']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = User;
      return this.apiClient.callApi(
        '/users/{uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUuidLegalPut operation.
     * @callback module:api/UsersApi~usersUuidLegalPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the legal consent settings for a given user.
     * Authorization header expects the following format ‘OAuth {token}’
     * @param {String} uuid 
     * @param {Array.<LegalConsent>} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {module:api/UsersApi~usersUuidLegalPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    usersUuidLegalPut(uuid, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling usersUuidLegalPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling usersUuidLegalPut");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json;charset=utf-8'];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = User;
      return this.apiClient.callApi(
        '/users/{uuid}/legal', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUuidPatch operation.
     * @callback module:api/UsersApi~usersUuidPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a user
     * Authorization header expects the following format ‘OAuth {token}’
     * @param {String} uuid 
     * @param {module:model/UserUpdate} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {module:api/UsersApi~usersUuidPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    usersUuidPatch(uuid, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling usersUuidPatch");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling usersUuidPatch");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json;charset=utf-8'];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = User;
      return this.apiClient.callApi(
        '/users/{uuid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUuidSubscriptionsSubsnoPausePost operation.
     * @callback module:api/UsersApi~usersUuidSubscriptionsSubsnoPausePostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PausedSubscription>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pause users subscription
     * @param {String} uuid 
     * @param {Number} subsno 
     * @param {module:model/SubscriptionPauseDates} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {module:api/UsersApi~usersUuidSubscriptionsSubsnoPausePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PausedSubscription>}
     */
    usersUuidSubscriptionsSubsnoPausePost(uuid, subsno, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling usersUuidSubscriptionsSubsnoPausePost");
      }
      // verify the required parameter 'subsno' is set
      if (subsno === undefined || subsno === null) {
        throw new Error("Missing the required parameter 'subsno' when calling usersUuidSubscriptionsSubsnoPausePost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling usersUuidSubscriptionsSubsnoPausePost");
      }

      let pathParams = {
        'uuid': uuid,
        'subsno': subsno
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json;charset=utf-8'];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = [PausedSubscription];
      return this.apiClient.callApi(
        '/users/{uuid}/subscriptions/{subsno}/pause', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
