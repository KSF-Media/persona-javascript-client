/**
 * Persona
 * KSF Media unified login service
 *
 * OpenAPI spec version: 1.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/InlineResponse400', 'model/InlineResponse403', 'model/InlineResponse4031', 'model/InlineResponse4032', 'model/InlineResponse415', 'model/InlineResponse500', 'model/LoginData', 'model/LoginDataSSO', 'model/LoginDataSoMe', 'model/LoginResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/InlineResponse400'), require('../model/InlineResponse403'), require('../model/InlineResponse4031'), require('../model/InlineResponse4032'), require('../model/InlineResponse415'), require('../model/InlineResponse500'), require('../model/LoginData'), require('../model/LoginDataSSO'), require('../model/LoginDataSoMe'), require('../model/LoginResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.Persona) {
      root.Persona = {};
    }
    root.Persona.LoginApi = factory(root.Persona.ApiClient, root.Persona.InlineResponse400, root.Persona.InlineResponse403, root.Persona.InlineResponse4031, root.Persona.InlineResponse4032, root.Persona.InlineResponse415, root.Persona.InlineResponse500, root.Persona.LoginData, root.Persona.LoginDataSSO, root.Persona.LoginDataSoMe, root.Persona.LoginResponse);
  }
}(this, function(ApiClient, InlineResponse400, InlineResponse403, InlineResponse4031, InlineResponse4032, InlineResponse415, InlineResponse500, LoginData, LoginDataSSO, LoginDataSoMe, LoginResponse) {
  'use strict';

  /**
   * Login service.
   * @module api/LoginApi
   * @version 1.2.0
   */

  /**
   * Constructs a new LoginApi. 
   * @alias module:api/LoginApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the loginPost operation.
     * @callback module:api/LoginApi~loginPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoginResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login with email and password
     * @param {module:model/LoginData} loginData 
     * @param {module:api/LoginApi~loginPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoginResponse}
     */
    this.loginPost = function(loginData, callback) {
      var postBody = loginData;

      // verify the required parameter 'loginData' is set
      if (loginData === undefined || loginData === null) {
        throw new Error("Missing the required parameter 'loginData' when calling loginPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json;charset=utf-8'];
      var accepts = ['application/json;charset=utf-8'];
      var returnType = LoginResponse;

      return this.apiClient.callApi(
        '/login', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the loginSomePost operation.
     * @callback module:api/LoginApi~loginSomePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoginResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login with social media
     * @param {module:model/LoginDataSoMe} loginDataSoMe 
     * @param {module:api/LoginApi~loginSomePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoginResponse}
     */
    this.loginSomePost = function(loginDataSoMe, callback) {
      var postBody = loginDataSoMe;

      // verify the required parameter 'loginDataSoMe' is set
      if (loginDataSoMe === undefined || loginDataSoMe === null) {
        throw new Error("Missing the required parameter 'loginDataSoMe' when calling loginSomePost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json;charset=utf-8'];
      var accepts = ['application/json;charset=utf-8'];
      var returnType = LoginResponse;

      return this.apiClient.callApi(
        '/login/some', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the loginSsoPost operation.
     * @callback module:api/LoginApi~loginSsoPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoginResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login with the AccessToken given by the SSO auth
     * @param {module:model/LoginDataSSO} loginDataSSO 
     * @param {module:api/LoginApi~loginSsoPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoginResponse}
     */
    this.loginSsoPost = function(loginDataSSO, callback) {
      var postBody = loginDataSSO;

      // verify the required parameter 'loginDataSSO' is set
      if (loginDataSSO === undefined || loginDataSSO === null) {
        throw new Error("Missing the required parameter 'loginDataSSO' when calling loginSsoPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json;charset=utf-8'];
      var accepts = ['application/json;charset=utf-8'];
      var returnType = LoginResponse;

      return this.apiClient.callApi(
        '/login/sso', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the loginUuidDelete operation.
     * @callback module:api/LoginApi~loginUuidDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Logout
     * Authorization header expects the following format ‘OAuth {token}’
     * @param {String} uuid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {module:api/LoginApi~loginUuidDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    this.loginUuidDelete = function(uuid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling loginUuidDelete");
      }


      var pathParams = {
        'uuid': uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json;charset=utf-8'];
      var returnType = [Object];

      return this.apiClient.callApi(
        '/login/{uuid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
